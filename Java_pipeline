// DO NOT EDIT MANUALLY
// THIS FILE IS AUTOGENERATED FORM ANSIBLE

// Currently using docker hub
def dockerRegistryUrl = 'https://index.docker.io/v1/'

// These Credential ID are defined in Jenkins
def dockerRegistryCredentialsId = 'pumptest2-dockerhub-access'
def gitCredentialsId = 'pumptest2-github-key-access'

// Variables defined in ansible
def project = 'ksb_pumptest2_referenceimplementation'
def imageName = 'digitalunit4ksb/ksb_pumptest2_referenceimplementation'
def repo = 'git@github.com:digitalunit4ksb/KSB_PumpTest2_ReferenceImplementation.git'
def buildType = 'qa'
def projectType = 'Java'
def branch = (buildType == 'prod' ? 'master' : 'develop')
def enableTest = false

pipeline {
    agent { label 'master' }
//    environment { DOCKER_BUILDKIT = '1' }
    stages {
		stage("Build Trigger Notification") {
			steps{
				slackSend channel: 'pumptest2', color: 'warning', message: "Job: ${env.JOB_NAME} with Buildnumber ${env.BUILD_NUMBER} has been Triggered", teamDomain: 'ksbdigitaluni-uik1843', tokenCredentialId: 'SlackNotificationToken'
				}
			}
        stage('Clone repo code') {
            steps {
                echo "Cloning project ${project} ."

                    git credentialsId: gitCredentialsId, url: repo,branch: 'develop'
            }
        }
		stage ('Quality assurance') {
                     parallel {
        stage('Running Sonarqube') {
                steps {
                   script {
                       def scannerHome = tool 'SonarQubeScanner';
                       withSonarQubeEnv("SonarQube") {
                       sh "${tool("SonarQubeScanner")}/bin/sonar-scanner"
                       }
                    }
                }
            }

		stage('Build Artifact'){
		    steps {
		        sh label: 'Install calculation library', script: 'mvn install:install-file -Dfile="./lib/calculationlibrary-2.2.0-SNAPSHOT.jar" -DgroupId=com.ksb.pumptest2 -DartifactId=calculationlibrary -Dversion=2.2.0-SNAPSHOT -Dpackaging=jar'
		        sh label: 'Create reference implementation package', script: 'pwd && ls -lart && git branch -a && git checkout develop && mvn package install && pwd'
		    }
		}   
        
        stage('artifact upload'){
		    steps{
			nexusArtifactUploader artifacts: [
			[
			artifactId: 'referenceimplementation',
			classifier: '',
			file: 'target/referenceimplementation-0.0.1-SNAPSHOT.jar',
			type: 'jar'
			]
			],
			credentialsId: 'Sonatype_nexus',
			groupId: 'pumptest2',
			nexusUrl: '137.117.214.55:8082/nexus',
			nexusVersion: 'nexus2',
			protocol: 'http',
			repository: 'snapshots',
			version: '0.0.1-SNAPSHOT'
		
		}
		} 
        stage('Image build'){
		    steps {
		sh label: '', script: 'docker build -t digitalunit4ksb/ksb_pumptest2_referenceimplementation:develop .'
           		}
		}
        stage('Push'){
		    steps {
       	sh label: '', script: 'docker push digitalunit4ksb/ksb_pumptest2_referenceimplementation:develop'
		}
		}
	}	
	}
	}
				  post {
				success {
					slackSend channel: 'pumptest2', color: 'good', message: "Job: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} was successful", teamDomain: 'ksbdigitaluni-uik1843', tokenCredentialId: 'SlackNotificationToken'
						}
				failure {
					slackSend channel: 'pumptest2', color: 'danger', message: "Job: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} was failed", teamDomain: 'ksbdigitaluni-uik1843', tokenCredentialId: 'SlackNotificationToken'
		}
	}
}
	